;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0011 // Delay needed for the stabilization of the ADC input voltage
; 0000 0012 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0013 // Start the AD conversion
; 0000 0014 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0015 // Wait for the AD conversion to complete
; 0000 0016 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0017 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0018 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0019 }
;PCODE: $00000021 VOL: 0
;
;
;float read_temp;
;char temp[16];
;
;void main(void)
; 0000 0020 {
;PCODE: $00000022 VOL: 0
; 0000 0021 
; 0000 0022 DDRA=0000000;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0023 PORTA=00000000;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0024 
; 0000 0025 DDRB=00000000;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0026 PORTB=00000000;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0027 
; 0000 0028 DDRC=00000000;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0029 PORTC=00000000;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002A 
; 0000 002B DDRD=00000000;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002C PORTD=00000000;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002D 
; 0000 002E // ADC initialization
; 0000 002F // ADC Clock frequency: 1000.000 kHz
; 0000 0030 // ADC Voltage Reference: AREF pin
; 0000 0031 // ADC Auto Trigger Source: ADC Stopped
; 0000 0032 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0033 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0034 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0035 
; 0000 0036 // SPI initialization
; 0000 0037 // SPI disabled
; 0000 0038 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0039 
; 0000 003A // TWI initialization
; 0000 003B // TWI disabled
; 0000 003C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003D 
; 0000 003E 
; 0000 003F lcd_init(16);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0040 lcd_clear();
;PCODE: $0000003F VOL: 0
; 0000 0041 lcd_puts("    WELCOME!    ");
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0042 delay_ms(300);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0043 lcd_clear();
;PCODE: $00000045 VOL: 0
; 0000 0044 while (1)
;PCODE: $00000046 VOL: 0
; 0000 0045       {
; 0000 0046       // Place your code here
; 0000 0047           read_temp = read_adc(0)/2.048;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0048           sprintf(temp, "TEMP:  %3.2f", read_temp);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0049           lcd_gotoxy(0, 0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004A           lcd_puts(temp);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004B           delay_ms(500);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004C       }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 004D }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0

	.DSEG
_0x6:
	.BYTE 0x11
