;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/14/2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;#define no_0 0b00111111 // 0
;#define no_1 0b00000110 // 1
;#define no_2 0b01011011 // 2
;#define no_3 0b01001111 // 3
;#define no_4 0b01100110 // 4
;#define no_5 0b01101101 // 5
;#define no_6 0b01111101 // 6
;#define no_7 0b00000111 // 7
;#define no_8 0b01111111 // 8
;#define no_9 0b01101111 // 9
;
;#define delay_on 0
;#define delay_off 0
;
;#define seg_1 PORTC.0 = 0
;#define seg_2 PORTC.1 = 0
;#define seg_3 PORTC.2 = 0
;#define seg_4 PORTC.3 = 0
;
;#define databus PORTA
;#define seg PORTC
;
;#define seg_off PORTC = 0xff
;
;
;char numbers[10] = {no_0, no_1, no_2, no_3, no_4, no_5, no_6, no_7, no_8, no_9};

	.DSEG
;
;void segment_display(char number, char segment) {
; 0000 0038 void segment_display(char number, char segment) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039     databus = numbers[number];
;PCODE: $0000000F VOL: 0
;	number -> Y+1
;	segment -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003A     seg =~(1 << (segment - 1));
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003B     delay_ms(delay_on);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003C     seg_off;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003D     delay_ms(delay_off);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003E }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void main(void)
; 0000 0041 {
;PCODE: $00000026 VOL: 0
; 0000 0042 // Declare your local variables here
; 0000 0043 
; 0000 0044 // Input/Output Ports initialization
; 0000 0045 // Port A initialization
; 0000 0046 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0047 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0048 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0049 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004A 
; 0000 004B // Port B initialization
; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0050 
; 0000 0051 // Port C initialization
; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0053 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0055 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0056 
; 0000 0057 // Port D initialization
; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0059 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005C 
; 0000 005D // Timer/Counter 0 initialization
; 0000 005E // Clock source: System Clock
; 0000 005F // Clock value: Timer 0 Stopped
; 0000 0060 // Mode: Normal top=0xFF
; 0000 0061 // OC0 output: Disconnected
; 0000 0062 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0063 TCNT0=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0064 OCR0=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 1 initialization
; 0000 0067 // Clock source: System Clock
; 0000 0068 // Clock value: Timer1 Stopped
; 0000 0069 // Mode: Normal top=0xFFFF
; 0000 006A // OC1A output: Disconnected
; 0000 006B // OC1B output: Disconnected
; 0000 006C // Noise Canceler: Off
; 0000 006D // Input Capture on Falling Edge
; 0000 006E // Timer1 Overflow Interrupt: Off
; 0000 006F // Input Capture Interrupt: Off
; 0000 0070 // Compare A Match Interrupt: Off
; 0000 0071 // Compare B Match Interrupt: Off
; 0000 0072 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0073 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0074 TCNT1H=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0075 TCNT1L=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0076 ICR1H=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0077 ICR1L=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0078 OCR1AH=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0079 OCR1AL=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007A OCR1BH=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007B OCR1BL=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007C 
; 0000 007D // Timer/Counter 2 initialization
; 0000 007E // Clock source: System Clock
; 0000 007F // Clock value: Timer2 Stopped
; 0000 0080 // Mode: Normal top=0xFF
; 0000 0081 // OC2 output: Disconnected
; 0000 0082 ASSR=0<<AS2;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0083 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0084 TCNT2=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0085 OCR2=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0086 
; 0000 0087 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0088 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0089 
; 0000 008A // External Interrupt(s) initialization
; 0000 008B // INT0: Off
; 0000 008C // INT1: Off
; 0000 008D // INT2: Off
; 0000 008E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008F MCUCSR=(0<<ISC2);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0090 
; 0000 0091 // USART initialization
; 0000 0092 // USART disabled
; 0000 0093 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0094 
; 0000 0095 // Analog Comparator initialization
; 0000 0096 // Analog Comparator: Off
; 0000 0097 // The Analog Comparator's positive input is
; 0000 0098 // connected to the AIN0 pin
; 0000 0099 // The Analog Comparator's negative input is
; 0000 009A // connected to the AIN1 pin
; 0000 009B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 009C SFIOR=(0<<ACME);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009D 
; 0000 009E // ADC initialization
; 0000 009F // ADC disabled
; 0000 00A0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A1 
; 0000 00A2 // SPI initialization
; 0000 00A3 // SPI disabled
; 0000 00A4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A5 
; 0000 00A6 // TWI initialization
; 0000 00A7 // TWI disabled
; 0000 00A8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00A9 
; 0000 00AA while (1)
;PCODE: $0000006B VOL: 0
; 0000 00AB       {
; 0000 00AC       // Place your code here
; 0000 00AD              segment_display(5, 1);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00AE              segment_display(3, 2);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00AF              segment_display(9, 3);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00B0              segment_display(0, 4);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00B1       }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00B2 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
