
AVRASM ver. 2.1.30  C:\Users\MHTrXz\Desktop\ATMEGA32\13 - keyPad\Debug\List\keyPad.asm Sat Jun 15 14:27:19 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 654b
00002b 5079
00002c 6461
00002d 6120      	.DB  0x4B,0x65,0x79,0x50,0x61,0x64,0x20,0x61
00002e 646e
00002f 4c20
000030 4443
000031 5000      	.DB  0x6E,0x64,0x20,0x4C,0x43,0x44,0x0,0x50
000032 6f72
000033 656a
000034 7463
000035 0021      	.DB  0x72,0x6F,0x6A,0x65,0x63,0x74,0x21,0x0
000036 0037
000037 0038
000038 0039
000039 002f      	.DB  0x37,0x0,0x38,0x0,0x39,0x0,0x2F,0x0
00003a 0034
00003b 0036
00003c 002a
00003d 0031      	.DB  0x34,0x0,0x36,0x0,0x2A,0x0,0x31,0x0
00003e 0032
00003f 0033
000040 002d
000041 0030      	.DB  0x32,0x0,0x33,0x0,0x2D,0x0,0x30,0x0
000042 003d
000043 002b      	.DB  0x3D,0x0,0x2B,0x0
                 _0x2000003:
000044 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000045 000f      	.DW  0x0F
000046 0260      	.DW  _0x3
000047 0054      	.DW  _0x0*2
                 
000048 0009      	.DW  0x09
000049 026f      	.DW  _0x3+15
00004a 0063      	.DW  _0x0*2+15
                 
00004b 0002      	.DW  0x02
00004c 0278      	.DW  _0x3+24
00004d 006c      	.DW  _0x0*2+24
                 
00004e 0002      	.DW  0x02
00004f 027a      	.DW  _0x3+26
000050 006e      	.DW  _0x0*2+26
                 
000051 0002      	.DW  0x02
000052 027c      	.DW  _0x3+28
000053 0070      	.DW  _0x0*2+28
                 
000054 0002      	.DW  0x02
000055 027e      	.DW  _0x3+30
000056 0072      	.DW  _0x0*2+30
                 
000057 0002      	.DW  0x02
000058 0280      	.DW  _0x3+32
000059 0074      	.DW  _0x0*2+32
                 
00005a 0002      	.DW  0x02
00005b 0282      	.DW  _0x3+34
00005c 0076      	.DW  _0x0*2+34
                 
00005d 0002      	.DW  0x02
00005e 0284      	.DW  _0x3+36
00005f 006c      	.DW  _0x0*2+24
                 
000060 0002      	.DW  0x02
000061 0286      	.DW  _0x3+38
000062 0078      	.DW  _0x0*2+36
                 
000063 0002      	.DW  0x02
000064 0288      	.DW  _0x3+40
000065 007a      	.DW  _0x0*2+38
                 
000066 0002      	.DW  0x02
000067 028a      	.DW  _0x3+42
000068 007c      	.DW  _0x0*2+40
                 
000069 0002      	.DW  0x02
00006a 028c      	.DW  _0x3+44
00006b 007e      	.DW  _0x0*2+42
                 
00006c 0002      	.DW  0x02
00006d 028e      	.DW  _0x3+46
00006e 0080      	.DW  _0x0*2+44
                 
00006f 0002      	.DW  0x02
000070 0290      	.DW  _0x3+48
000071 0082      	.DW  _0x0*2+46
                 
000072 0002      	.DW  0x02
000073 0292      	.DW  _0x3+50
000074 0084      	.DW  _0x0*2+48
                 
000075 0002      	.DW  0x02
000076 0294      	.DW  _0x3+52
000077 0086      	.DW  _0x0*2+50
                 
000078 0002      	.DW  0x02
000079 0296      	.DW  __base_y_G100
00007a 0088      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00007b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007c 94f8      	CLI
00007d 27ee      	CLR  R30
00007e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007f e0f1      	LDI  R31,1
000080 bffb      	OUT  GICR,R31
000081 bfeb      	OUT  GICR,R30
000082 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000083 e08d      	LDI  R24,(14-2)+1
000084 e0a2      	LDI  R26,2
000085 27bb      	CLR  R27
                 __CLEAR_REG:
000086 93ed      	ST   X+,R30
000087 958a      	DEC  R24
000088 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000089 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00008c 93ed      	ST   X+,R30
00008d 9701      	SBIW R24,1
00008e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008f e8ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000090 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000091 9185      	LPM  R24,Z+
000092 9195      	LPM  R25,Z+
000093 9700      	SBIW R24,0
000094 f061      	BREQ __GLOBAL_INI_END
000095 91a5      	LPM  R26,Z+
000096 91b5      	LPM  R27,Z+
000097 9005      	LPM  R0,Z+
000098 9015      	LPM  R1,Z+
000099 01bf      	MOVW R22,R30
00009a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009b 9005      	LPM  R0,Z+
00009c 920d      	ST   X+,R0
00009d 9701      	SBIW R24,1
00009e f7e1      	BRNE __GLOBAL_INI_LOOP
00009f 01fb      	MOVW R30,R22
0000a0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a1 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a2 bfed      	OUT  SPL,R30
0000a3 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a5 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a6 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a7 940c 00a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * keyPad.c
                 ; *
                 ; * Created: 6/15/2024 1:09:44 PM
                 ; * Author: MHTrXz
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;#define row_1 PORTD.0
                 ;#define row_2 PORTD.1
                 ;#define row_3 PORTD.2
                 ;#define row_4 PORTD.3
                 ;
                 ;#define col_1 PIND.4
                 ;#define col_2 PIND.5
                 ;#define col_3 PIND.6
                 ;#define col_4 PIND.7
                 ;
                 ;#define key_0    0
                 ;#define key_1    1
                 ;#define key_2    2
                 ;#define key_3    3
                 ;#define key_4    4
                 ;#define key_5    5
                 ;#define key_6    6
                 ;#define key_7    7
                 ;#define key_8    8
                 ;#define key_9    9
                 ;#define key_mul  10
                 ;#define key_div  11
                 ;#define key_pls  12
                 ;#define key_mns  13
                 ;#define key_equ  14
                 ;#define key_on   15
                 ;
                 ;void main(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0029 
                 ; 0000 002A 
                 ; 0000 002B lcd_init(16);
0000a9 e1a0      	LDI  R26,LOW(16)
0000aa d11b      	RCALL _lcd_init
                 ; 0000 002C lcd_clear();
0000ab d0dd      	RCALL _lcd_clear
                 ; 0000 002D 
                 ; 0000 002E PORTC = 0x00;
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bbe5      	OUT  0x15,R30
                 ; 0000 002F PORTD = 0x00;
0000ae bbe2      	OUT  0x12,R30
                 ; 0000 0030 
                 ; 0000 0031 DDRC = 0xff;
0000af efef      	LDI  R30,LOW(255)
0000b0 bbe4      	OUT  0x14,R30
                 ; 0000 0032 DDRD = 0x0f;
0000b1 e0ef      	LDI  R30,LOW(15)
0000b2 bbe1      	OUT  0x11,R30
                 ; 0000 0033 
                 ; 0000 0034 lcd_gotoxy(1, 0);
0000b3 e0e1      	LDI  R30,LOW(1)
0000b4 93ea      	ST   -Y,R30
0000b5 e0a0      	LDI  R26,LOW(0)
0000b6 d0c1      	RCALL _lcd_gotoxy
                 ; 0000 0035 lcd_puts("KeyPad and LCD");
                +
0000b7 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
0000b8 e0b2     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
0000b9 d0fb      	RCALL _lcd_puts
                 ; 0000 0036 lcd_gotoxy(4, 1);
0000ba e0e4      	LDI  R30,LOW(4)
0000bb 93ea      	ST   -Y,R30
0000bc e0a1      	LDI  R26,LOW(1)
0000bd d0ba      	RCALL _lcd_gotoxy
                 ; 0000 0037 lcd_puts("Project!");
                +
0000be e6af     +LDI R26 , LOW ( _0x3 + ( 15 ) )
0000bf e0b2     +LDI R27 , HIGH ( _0x3 + ( 15 ) )
                 	__POINTW2MN _0x3,15
0000c0 d0f4      	RCALL _lcd_puts
                 ; 0000 0038 
                 ; 0000 0039 delay_ms(200);
0000c1 eca8      	LDI  R26,LOW(200)
0000c2 e0b0      	LDI  R27,0
0000c3 940e 0204 	CALL _delay_ms
                 ; 0000 003A lcd_clear();
0000c5 d0c3      	RCALL _lcd_clear
                 ; 0000 003B 
                 ; 0000 003C while (1)
                 _0x4:
                 ; 0000 003D     {
                 ; 0000 003E     // Please write your application code here
                 ; 0000 003F 
                 ; 0000 0040         // ROW 1
                 ; 0000 0041         row_1 = 1;
0000c6 9a90      	SBI  0x12,0
                 ; 0000 0042         row_2 = 0;
0000c7 9891      	CBI  0x12,1
                 ; 0000 0043         row_3 = 0;
0000c8 d129      	RCALL SUBOPT_0x0
                 ; 0000 0044         row_4 = 0;
                 ; 0000 0045         delay_ms(5);
                 ; 0000 0046 
                 ; 0000 0047         if(col_1 == 1) {
0000c9 9b84      	SBIS 0x10,4
0000ca c006      	RJMP _0xF
                 ; 0000 0048             lcd_puts("7");
                +
0000cb e7a8     +LDI R26 , LOW ( _0x3 + ( 24 ) )
0000cc e0b2     +LDI R27 , HIGH ( _0x3 + ( 24 ) )
                 	__POINTW2MN _0x3,24
0000cd d0e7      	RCALL _lcd_puts
                 ; 0000 0049             while(col_1 == 1);
                 _0x10:
0000ce 9984      	SBIC 0x10,4
0000cf cffe      	RJMP _0x10
                 ; 0000 004A         } else if (col_2 == 1){
0000d0 c017      	RJMP _0x13
                 _0xF:
0000d1 9b85      	SBIS 0x10,5
0000d2 c006      	RJMP _0x14
                 ; 0000 004B             lcd_puts("8");
                +
0000d3 e7aa     +LDI R26 , LOW ( _0x3 + ( 26 ) )
0000d4 e0b2     +LDI R27 , HIGH ( _0x3 + ( 26 ) )
                 	__POINTW2MN _0x3,26
0000d5 d0df      	RCALL _lcd_puts
                 ; 0000 004C             while(col_2 == 1);
                 _0x15:
0000d6 9985      	SBIC 0x10,5
0000d7 cffe      	RJMP _0x15
                 ; 0000 004D         } else if (col_3 == 1){
0000d8 c00f      	RJMP _0x18
                 _0x14:
0000d9 9b86      	SBIS 0x10,6
0000da c006      	RJMP _0x19
                 ; 0000 004E             lcd_puts("9");
                +
0000db e7ac     +LDI R26 , LOW ( _0x3 + ( 28 ) )
0000dc e0b2     +LDI R27 , HIGH ( _0x3 + ( 28 ) )
                 	__POINTW2MN _0x3,28
0000dd d0d7      	RCALL _lcd_puts
                 ; 0000 004F             while(col_3 == 1);
                 _0x1A:
0000de 9986      	SBIC 0x10,6
0000df cffe      	RJMP _0x1A
                 ; 0000 0050         } else if (col_4 == 1){
0000e0 c007      	RJMP _0x1D
                 _0x19:
0000e1 9b87      	SBIS 0x10,7
0000e2 c005      	RJMP _0x1E
                 ; 0000 0051             lcd_puts("/");
                +
0000e3 e7ae     +LDI R26 , LOW ( _0x3 + ( 30 ) )
0000e4 e0b2     +LDI R27 , HIGH ( _0x3 + ( 30 ) )
                 	__POINTW2MN _0x3,30
0000e5 d0cf      	RCALL _lcd_puts
                 ; 0000 0052             while(col_4 == 1);
                 _0x1F:
0000e6 9987      	SBIC 0x10,7
0000e7 cffe      	RJMP _0x1F
                 ; 0000 0053         }
                 ; 0000 0054 
                 ; 0000 0055         // ROW 2
                 ; 0000 0056         row_1 = 0;
                 _0x1E:
                 _0x1D:
                 _0x18:
                 _0x13:
0000e8 9890      	CBI  0x12,0
                 ; 0000 0057         row_2 = 1;
0000e9 9a91      	SBI  0x12,1
                 ; 0000 0058         row_3 = 0;
0000ea d107      	RCALL SUBOPT_0x0
                 ; 0000 0059         row_4 = 0;
                 ; 0000 005A         delay_ms(5);
                 ; 0000 005B 
                 ; 0000 005C         if(col_1 == 1) {
0000eb 9b84      	SBIS 0x10,4
0000ec c006      	RJMP _0x2A
                 ; 0000 005D             lcd_puts("4");
                +
0000ed e8a0     +LDI R26 , LOW ( _0x3 + ( 32 ) )
0000ee e0b2     +LDI R27 , HIGH ( _0x3 + ( 32 ) )
                 	__POINTW2MN _0x3,32
0000ef d0c5      	RCALL _lcd_puts
                 ; 0000 005E             while(col_1 == 1);
                 _0x2B:
0000f0 9984      	SBIC 0x10,4
0000f1 cffe      	RJMP _0x2B
                 ; 0000 005F         } else if (col_2 == 1){
0000f2 c017      	RJMP _0x2E
                 _0x2A:
0000f3 9b85      	SBIS 0x10,5
0000f4 c006      	RJMP _0x2F
                 ; 0000 0060             lcd_puts("6");
                +
0000f5 e8a2     +LDI R26 , LOW ( _0x3 + ( 34 ) )
0000f6 e0b2     +LDI R27 , HIGH ( _0x3 + ( 34 ) )
                 	__POINTW2MN _0x3,34
0000f7 d0bd      	RCALL _lcd_puts
                 ; 0000 0061             while(col_2 == 1);
                 _0x30:
0000f8 9985      	SBIC 0x10,5
0000f9 cffe      	RJMP _0x30
                 ; 0000 0062         } else if (col_3 == 1){
0000fa c00f      	RJMP _0x33
                 _0x2F:
0000fb 9b86      	SBIS 0x10,6
0000fc c006      	RJMP _0x34
                 ; 0000 0063             lcd_puts("7");
                +
0000fd e8a4     +LDI R26 , LOW ( _0x3 + ( 36 ) )
0000fe e0b2     +LDI R27 , HIGH ( _0x3 + ( 36 ) )
                 	__POINTW2MN _0x3,36
0000ff d0b5      	RCALL _lcd_puts
                 ; 0000 0064             while(col_3 == 1);
                 _0x35:
000100 9986      	SBIC 0x10,6
000101 cffe      	RJMP _0x35
                 ; 0000 0065         } else if (col_4 == 1){
000102 c007      	RJMP _0x38
                 _0x34:
000103 9b87      	SBIS 0x10,7
000104 c005      	RJMP _0x39
                 ; 0000 0066             lcd_puts("*");
                +
000105 e8a6     +LDI R26 , LOW ( _0x3 + ( 38 ) )
000106 e0b2     +LDI R27 , HIGH ( _0x3 + ( 38 ) )
                 	__POINTW2MN _0x3,38
000107 d0ad      	RCALL _lcd_puts
                 ; 0000 0067             while(col_4 == 1);
                 _0x3A:
000108 9987      	SBIC 0x10,7
000109 cffe      	RJMP _0x3A
                 ; 0000 0068         }
                 ; 0000 0069 
                 ; 0000 006A         // ROW 3
                 ; 0000 006B         row_1 = 0;
                 _0x39:
                 _0x38:
                 _0x33:
                 _0x2E:
00010a 9890      	CBI  0x12,0
                 ; 0000 006C         row_2 = 0;
00010b 9891      	CBI  0x12,1
                 ; 0000 006D         row_3 = 1;
00010c 9a92      	SBI  0x12,2
                 ; 0000 006E         row_4 = 0;
00010d 9893      	CBI  0x12,3
                 ; 0000 006F         delay_ms(5);
00010e e0a5      	LDI  R26,LOW(5)
00010f e0b0      	LDI  R27,0
000110 940e 0204 	CALL _delay_ms
                 ; 0000 0070 
                 ; 0000 0071         if(col_1 == 1) {
000112 9b84      	SBIS 0x10,4
000113 c006      	RJMP _0x45
                 ; 0000 0072             lcd_puts("1");
                +
000114 e8a8     +LDI R26 , LOW ( _0x3 + ( 40 ) )
000115 e0b2     +LDI R27 , HIGH ( _0x3 + ( 40 ) )
                 	__POINTW2MN _0x3,40
000116 d09e      	RCALL _lcd_puts
                 ; 0000 0073             while(col_1 == 1);
                 _0x46:
000117 9984      	SBIC 0x10,4
000118 cffe      	RJMP _0x46
                 ; 0000 0074         } else if (col_2 == 1){
000119 c017      	RJMP _0x49
                 _0x45:
00011a 9b85      	SBIS 0x10,5
00011b c006      	RJMP _0x4A
                 ; 0000 0075             lcd_puts("2");
                +
00011c e8aa     +LDI R26 , LOW ( _0x3 + ( 42 ) )
00011d e0b2     +LDI R27 , HIGH ( _0x3 + ( 42 ) )
                 	__POINTW2MN _0x3,42
00011e d096      	RCALL _lcd_puts
                 ; 0000 0076             while(col_2 == 1);
                 _0x4B:
00011f 9985      	SBIC 0x10,5
000120 cffe      	RJMP _0x4B
                 ; 0000 0077         } else if (col_3 == 1){
000121 c00f      	RJMP _0x4E
                 _0x4A:
000122 9b86      	SBIS 0x10,6
000123 c006      	RJMP _0x4F
                 ; 0000 0078             lcd_puts("3");
                +
000124 e8ac     +LDI R26 , LOW ( _0x3 + ( 44 ) )
000125 e0b2     +LDI R27 , HIGH ( _0x3 + ( 44 ) )
                 	__POINTW2MN _0x3,44
000126 d08e      	RCALL _lcd_puts
                 ; 0000 0079             while(col_3 == 1);
                 _0x50:
000127 9986      	SBIC 0x10,6
000128 cffe      	RJMP _0x50
                 ; 0000 007A         } else if (col_4 == 1){
000129 c007      	RJMP _0x53
                 _0x4F:
00012a 9b87      	SBIS 0x10,7
00012b c005      	RJMP _0x54
                 ; 0000 007B             lcd_puts("-");
                +
00012c e8ae     +LDI R26 , LOW ( _0x3 + ( 46 ) )
00012d e0b2     +LDI R27 , HIGH ( _0x3 + ( 46 ) )
                 	__POINTW2MN _0x3,46
00012e d086      	RCALL _lcd_puts
                 ; 0000 007C             while(col_4 == 1);
                 _0x55:
00012f 9987      	SBIC 0x10,7
000130 cffe      	RJMP _0x55
                 ; 0000 007D         }
                 ; 0000 007E 
                 ; 0000 007F         // ROW 4
                 ; 0000 0080         row_1 = 0;
                 _0x54:
                 _0x53:
                 _0x4E:
                 _0x49:
000131 9890      	CBI  0x12,0
                 ; 0000 0081         row_2 = 0;
000132 9891      	CBI  0x12,1
                 ; 0000 0082         row_3 = 0;
000133 9892      	CBI  0x12,2
                 ; 0000 0083         row_4 = 1;
000134 9a93      	SBI  0x12,3
                 ; 0000 0084         delay_ms(5);
000135 e0a5      	LDI  R26,LOW(5)
000136 e0b0      	LDI  R27,0
000137 940e 0204 	CALL _delay_ms
                 ; 0000 0085 
                 ; 0000 0086         if(col_1 == 1) {
000139 9b84      	SBIS 0x10,4
00013a c004      	RJMP _0x60
                 ; 0000 0087             lcd_clear();
00013b d04d      	RCALL _lcd_clear
                 ; 0000 0088             while(col_1 == 1);
                 _0x61:
00013c 9984      	SBIC 0x10,4
00013d cffe      	RJMP _0x61
                 ; 0000 0089         } else if (col_2 == 1){
00013e c017      	RJMP _0x64
                 _0x60:
00013f 9b85      	SBIS 0x10,5
000140 c006      	RJMP _0x65
                 ; 0000 008A             lcd_puts("0");
                +
000141 e9a0     +LDI R26 , LOW ( _0x3 + ( 48 ) )
000142 e0b2     +LDI R27 , HIGH ( _0x3 + ( 48 ) )
                 	__POINTW2MN _0x3,48
000143 d071      	RCALL _lcd_puts
                 ; 0000 008B             while(col_2 == 1);
                 _0x66:
000144 9985      	SBIC 0x10,5
000145 cffe      	RJMP _0x66
                 ; 0000 008C         } else if (col_3 == 1){
000146 c00f      	RJMP _0x69
                 _0x65:
000147 9b86      	SBIS 0x10,6
000148 c006      	RJMP _0x6A
                 ; 0000 008D             lcd_puts("=");
                +
000149 e9a2     +LDI R26 , LOW ( _0x3 + ( 50 ) )
00014a e0b2     +LDI R27 , HIGH ( _0x3 + ( 50 ) )
                 	__POINTW2MN _0x3,50
00014b d069      	RCALL _lcd_puts
                 ; 0000 008E             while(col_3 == 1);
                 _0x6B:
00014c 9986      	SBIC 0x10,6
00014d cffe      	RJMP _0x6B
                 ; 0000 008F         } else if (col_4 == 1){
00014e c007      	RJMP _0x6E
                 _0x6A:
00014f 9b87      	SBIS 0x10,7
000150 c005      	RJMP _0x6F
                 ; 0000 0090             lcd_puts("+");
                +
000151 e9a4     +LDI R26 , LOW ( _0x3 + ( 52 ) )
000152 e0b2     +LDI R27 , HIGH ( _0x3 + ( 52 ) )
                 	__POINTW2MN _0x3,52
000153 d061      	RCALL _lcd_puts
                 ; 0000 0091             while(col_4 == 1);
                 _0x70:
000154 9987      	SBIC 0x10,7
000155 cffe      	RJMP _0x70
                 ; 0000 0092         }
                 ; 0000 0093     }
                 _0x6F:
                 _0x6E:
                 _0x69:
                 _0x64:
000156 cf6f      	RJMP _0x4
                 ; 0000 0094 }
                 _0x73:
000157 cfff      	RJMP _0x73
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000260           	.BYTE 0x36
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000158 93aa      	ST   -Y,R26
000159 b3e5      	IN   R30,0x15
00015a 70ef      	ANDI R30,LOW(0xF)
00015b 2fae      	MOV  R26,R30
00015c 81e8      	LD   R30,Y
00015d 7fe0      	ANDI R30,LOW(0xF0)
00015e 2bea      	OR   R30,R26
00015f bbe5      	OUT  0x15,R30
                +
000160 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000161 958a     +DEC R24
000162 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000163 9aa9      	SBI  0x15,1
                +
000164 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000165 958a     +DEC R24
000166 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000167 98a9      	CBI  0x15,1
                +
000168 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000169 958a     +DEC R24
00016a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00016b c084      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00016c 93aa      	ST   -Y,R26
00016d 81a8      	LD   R26,Y
00016e dfe9      	RCALL __lcd_write_nibble_G100
00016f 81e8          ld    r30,y
000170 95e2          swap  r30
000171 83e8          st    y,r30
000172 81a8      	LD   R26,Y
000173 dfe4      	RCALL __lcd_write_nibble_G100
                +
000174 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000175 958a     +DEC R24
000176 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000177 c078      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000178 93aa      	ST   -Y,R26
000179 81e8      	LD   R30,Y
00017a e0f0      	LDI  R31,0
00017b 56ea      	SUBI R30,LOW(-__base_y_G100)
00017c 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00017d 81e0      	LD   R30,Z
00017e 81a9      	LDD  R26,Y+1
00017f 0fae      	ADD  R26,R30
000180 dfeb      	RCALL __lcd_write_data
000181 81e9      	LDD  R30,Y+1
000182 93e0 029a 	STS  __lcd_x,R30
000184 81e8      	LD   R30,Y
000185 93e0 029b 	STS  __lcd_y,R30
000187 9622      	ADIW R28,2
000188 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000189 e0a2      	LDI  R26,LOW(2)
00018a d06d      	RCALL SUBOPT_0x1
00018b e0ac      	LDI  R26,LOW(12)
00018c dfdf      	RCALL __lcd_write_data
00018d e0a1      	LDI  R26,LOW(1)
00018e d069      	RCALL SUBOPT_0x1
00018f e0e0      	LDI  R30,LOW(0)
000190 93e0 029b 	STS  __lcd_y,R30
000192 93e0 029a 	STS  __lcd_x,R30
000194 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000195 93aa      	ST   -Y,R26
000196 81a8      	LD   R26,Y
000197 30aa      	CPI  R26,LOW(0xA)
000198 f031      	BREQ _0x2000005
000199 91e0 029c 	LDS  R30,__lcd_maxx
00019b 91a0 029a 	LDS  R26,__lcd_x
00019d 17ae      	CP   R26,R30
00019e f060      	BRLO _0x2000004
                 _0x2000005:
00019f e0e0      	LDI  R30,LOW(0)
0001a0 93ea      	ST   -Y,R30
0001a1 91a0 029b 	LDS  R26,__lcd_y
0001a3 5faf      	SUBI R26,-LOW(1)
0001a4 93a0 029b 	STS  __lcd_y,R26
0001a6 dfd1      	RCALL _lcd_gotoxy
0001a7 81a8      	LD   R26,Y
0001a8 30aa      	CPI  R26,LOW(0xA)
0001a9 f409      	BRNE _0x2000007
0001aa c045      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001ab 91e0 029a 	LDS  R30,__lcd_x
0001ad 5fef      	SUBI R30,-LOW(1)
0001ae 93e0 029a 	STS  __lcd_x,R30
0001b0 9aa8      	SBI  0x15,0
0001b1 81a8      	LD   R26,Y
0001b2 dfb9      	RCALL __lcd_write_data
0001b3 98a8      	CBI  0x15,0
0001b4 c03b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001b5 93ba      	ST   -Y,R27
0001b6 93aa      	ST   -Y,R26
0001b7 931a      	ST   -Y,R17
                 _0x2000008:
0001b8 81a9      	LDD  R26,Y+1
0001b9 81ba      	LDD  R27,Y+1+1
0001ba 91ed      	LD   R30,X+
0001bb 83a9      	STD  Y+1,R26
0001bc 83ba      	STD  Y+1+1,R27
0001bd 2f1e      	MOV  R17,R30
0001be 30e0      	CPI  R30,0
0001bf f019      	BREQ _0x200000A
0001c0 2fa1      	MOV  R26,R17
0001c1 dfd3      	RCALL _lcd_putchar
0001c2 cff5      	RJMP _0x2000008
                 _0x200000A:
0001c3 8118      	LDD  R17,Y+0
0001c4 9623      	ADIW R28,3
0001c5 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001c6 93aa      	ST   -Y,R26
0001c7 b3e4      	IN   R30,0x14
0001c8 6fe0      	ORI  R30,LOW(0xF0)
0001c9 bbe4      	OUT  0x14,R30
0001ca 9aa1      	SBI  0x14,1
0001cb 9aa0      	SBI  0x14,0
0001cc 9aa2      	SBI  0x14,2
0001cd 98a9      	CBI  0x15,1
0001ce 98a8      	CBI  0x15,0
0001cf 98aa      	CBI  0x15,2
0001d0 81e8      	LD   R30,Y
0001d1 93e0 029c 	STS  __lcd_maxx,R30
0001d3 58e0      	SUBI R30,-LOW(128)
                +
0001d4 93e0 0298+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001d6 81e8      	LD   R30,Y
0001d7 54e0      	SUBI R30,-LOW(192)
                +
0001d8 93e0 0299+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001da e1a4      	LDI  R26,LOW(20)
0001db e0b0      	LDI  R27,0
0001dc 940e 0204 	CALL _delay_ms
0001de d01e      	RCALL SUBOPT_0x2
0001df d01d      	RCALL SUBOPT_0x2
0001e0 d01c      	RCALL SUBOPT_0x2
0001e1 e2a0      	LDI  R26,LOW(32)
0001e2 df75      	RCALL __lcd_write_nibble_G100
                +
0001e3 ec88     +LDI R24 , LOW ( 200 )
0001e4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001e5 9701     +SBIW R24 , 1
0001e6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001e7 e2a8      	LDI  R26,LOW(40)
0001e8 df83      	RCALL __lcd_write_data
0001e9 e0a4      	LDI  R26,LOW(4)
0001ea df81      	RCALL __lcd_write_data
0001eb e8a5      	LDI  R26,LOW(133)
0001ec df7f      	RCALL __lcd_write_data
0001ed e0a6      	LDI  R26,LOW(6)
0001ee df7d      	RCALL __lcd_write_data
0001ef df99      	RCALL _lcd_clear
                 _0x2020001:
0001f0 9621      	ADIW R28,1
0001f1 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000296           	.BYTE 0x4
                 __lcd_x:
00029a           	.BYTE 0x1
                 __lcd_y:
00029b           	.BYTE 0x1
                 __lcd_maxx:
00029c           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001f2 9892      	CBI  0x12,2
0001f3 9893      	CBI  0x12,3
0001f4 e0a5      	LDI  R26,LOW(5)
0001f5 e0b0      	LDI  R27,0
0001f6 940c 0204 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001f8 df73      	RCALL __lcd_write_data
0001f9 e0a3      	LDI  R26,LOW(3)
0001fa e0b0      	LDI  R27,0
0001fb 940c 0204 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001fd e3a0      	LDI  R26,LOW(48)
0001fe df59      	RCALL __lcd_write_nibble_G100
                +
0001ff ec88     +LDI R24 , LOW ( 200 )
000200 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000201 9701     +SBIW R24 , 1
000202 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000203 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000204 9610      	adiw r26,0
000205 f039      	breq __delay_ms1
                 __delay_ms0:
000206 95a8      	wdr
                +
000207 ed80     +LDI R24 , LOW ( 0x7D0 )
000208 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000209 9701     +SBIW R24 , 1
00020a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00020b 9711      	sbiw r26,1
00020c f7c9      	brne __delay_ms0
                 __delay_ms1:
00020d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  65 r27:  28 r28:   4 r29:   1 r30:  66 r31:   5 
x  :   4 y  :  30 z  :   8 
Registers used: 15 out of 35 (42.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   4 
cbi   :  15 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  24 ld    :  13 ldd   :   5 ldi   :  88 
lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  12 pop   :   0 push  :   0 rcall :  45 ret   :   6 
reti  :   0 rjmp  :  52 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   9 sbic  :  16 sbis  :  16 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   2 sts   :   9 sub   :   0 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00041c    888    164   1052   32768   3.2%
[.dseg] 0x000060 0x00029d      0     61     61    2048   3.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
